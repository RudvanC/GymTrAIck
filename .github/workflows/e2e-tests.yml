name: E2E Tests # Título que verás en la pestaña “Actions”

# ────────────────  Cuándo se ejecuta  ────────────────
on:
  push:
    branches: [main, test-e2e, test-deploy] # Ejecuta en pushes a main (ajusta a tus ramas)
  pull_request:
    branches: [main, test-e2e, test-deploy] # Ejecuta en los PRs contra main
  workflow_dispatch: # Permite lanzarlo manualmente desde la UI

# ────────────────  Job principal  ────────────────
jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Evita colgados infinitos

    # Variables de entorno necesarias para tu app y para los tests
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SERVICE_ROLE_KEY }}

    steps:
      # 1) Checkout del código
      - uses: actions/checkout@v4

      # 2) Node + cache de npm
      - uses: actions/setup-node@v4
        with:
          node-version: 20 # O la versión que uses
          cache: npm # Caching de ~/.npm

      # 3) Instalar dependencias
      - run: npm ci

      # 4) Build de Next.js (necesario para el webServer de Playwright)
      - run: npm run build

      # 5) Instalar navegadores y deps de Playwright
      - run: npx playwright install --with-deps

      # 6) Ejecutar los tests E2E
      - name: Run Playwright tests
        run: npm run test:e2e # ← asegúrate de tener este script

      # 7) Subir el informe HTML (opcional, pero útil)
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }} # No sube nada si el job fue cancelado
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
